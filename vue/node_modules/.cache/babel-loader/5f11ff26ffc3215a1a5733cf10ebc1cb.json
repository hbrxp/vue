{"remainingRequest":"F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\node_modules\\thread-loader\\dist\\cjs.js!F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\node_modules\\babel-loader\\lib\\index.js!F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\src\\plugins\\axios.js","dependencies":[{"path":"F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\src\\plugins\\axios.js","mtime":1583846984903},{"path":"F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1583458652080},{"path":"F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1583458641338},{"path":"F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\node_modules\\babel-loader\\lib\\index.js","mtime":1583458705086}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport axios from 'axios';\nimport Vue from 'vue';\nimport router from \"./router.js\"; // {currentRoute,push,replace} -> currentRoute=={key:value,fullPath}\n//添加一个请求的拦截器\n\naxios.interceptors.request.use(function (config) {\n  // console.log('请求时拦截器');\n  //config 含有发出的请求的配置信息  axios(config)\n  // 请求发出之前做点事  请求体里面 每次都自动携带token\n  var token = window.localStorage.getItem('user');\n  token = token ? JSON.parse(window.localStorage.getItem('user')).token : '';\n  config.headers = {\n    token: token\n  };\n  return config; // 撒手放出经过配置的请求\n}, function (error) {\n  // 发出了错误的请求，拦截\n  return Promise.reject(error);\n}); // 添加一个响应的拦截器\n\naxios.interceptors.response.use(function (response) {\n  // console.log('响应时拦截器',response.data.err);\n  //response  ~~ axios请求后的res\n  // 响应数据回来后，到达目标组件之前，做点事   res.status   res.data.err == 2\n  //校验返回数据，token过期，路由跳转login,传递当前路由地址\n  var currentRoute = router.currentRoute.fullPath; //获取当前路由全路径，string\n\n  if (response.data.err === 2 && !currentRoute.includes('/login')) {\n    router.replace({\n      path: '/login',\n      query: {\n        p: currentRoute\n      }\n    });\n  }\n\n  return response; //奔向组件\n}, function (error) {\n  // 错误的响应，拦截\n  return Promise.reject(error);\n});\nVue.prototype.$axios = axios;\nwindow.axios = axios;\nexport default axios;",{"version":3,"sources":["F:\\前端笔记\\前端第三阶段笔记\\第二周练习题\\3-6项目\\src\\plugins\\axios.js"],"names":["axios","Vue","router","interceptors","request","use","config","token","window","localStorage","getItem","JSON","parse","headers","error","Promise","reject","response","currentRoute","fullPath","data","err","includes","replace","path","query","p","prototype","$axios"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,oB,CAAgC;AAEhC;;AACAF,KAAK,CAACG,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAASC,MAAT,EAAiB;AAC9C;AACA;AAEA;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAZ;AACAH,EAAAA,KAAK,GAAGA,KAAK,GAAGI,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAX,EAAgDH,KAAnD,GAA2D,EAAxE;AACAD,EAAAA,MAAM,CAACO,OAAP,GAAe;AACbN,IAAAA,KAAK,EAAEA;AADM,GAAf;AAGA,SAAOD,MAAP,CAV8C,CAUhC;AACf,CAXD,EAWG,UAASQ,KAAT,EAAgB;AACjB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAdD,E,CAgBA;;AACAd,KAAK,CAACG,YAAN,CAAmBc,QAAnB,CAA4BZ,GAA5B,CAAgC,UAASY,QAAT,EAAmB;AACjD;AACA;AACA;AAEA;AACA,MAAIC,YAAY,GAAGhB,MAAM,CAACgB,YAAP,CAAoBC,QAAvC,CANiD,CAMD;;AAChD,MAAGF,QAAQ,CAACG,IAAT,CAAcC,GAAd,KAAoB,CAApB,IAAyB,CAACH,YAAY,CAACI,QAAb,CAAsB,QAAtB,CAA7B,EAA6D;AAC3DpB,IAAAA,MAAM,CAACqB,OAAP,CAAe;AACbC,MAAAA,IAAI,EAAC,QADQ;AAEbC,MAAAA,KAAK,EAAC;AAACC,QAAAA,CAAC,EAACR;AAAH;AAFO,KAAf;AAID;;AAED,SAAOD,QAAP,CAdiD,CAcjC;AACjB,CAfD,EAeG,UAASH,KAAT,EAAgB;AACjB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAlBD;AAqBAb,GAAG,CAAC0B,SAAJ,CAAcC,MAAd,GAAqB5B,KAArB;AACAQ,MAAM,CAACR,KAAP,GAAaA,KAAb;AACA,eAAeA,KAAf","sourcesContent":["import axios from 'axios';\nimport Vue from 'vue';\nimport router from './router.js'// {currentRoute,push,replace} -> currentRoute=={key:value,fullPath}\n\n//添加一个请求的拦截器\naxios.interceptors.request.use(function(config) {\n  // console.log('请求时拦截器');\n  //config 含有发出的请求的配置信息  axios(config)\n  \n  // 请求发出之前做点事  请求体里面 每次都自动携带token\n  let token = window.localStorage.getItem('user')\n  token = token ? JSON.parse(window.localStorage.getItem('user')).token : ''\n  config.headers={\n    token: token\n  }\n  return config;// 撒手放出经过配置的请求\n}, function(error) {\n  // 发出了错误的请求，拦截\n  return Promise.reject(error);\n});\n\n// 添加一个响应的拦截器\naxios.interceptors.response.use(function(response) {\n  // console.log('响应时拦截器',response.data.err);\n  //response  ~~ axios请求后的res\n  // 响应数据回来后，到达目标组件之前，做点事   res.status   res.data.err == 2\n  \n  //校验返回数据，token过期，路由跳转login,传递当前路由地址\n  let currentRoute = router.currentRoute.fullPath;//获取当前路由全路径，string\n  if(response.data.err===2 && !currentRoute.includes('/login')){\n    router.replace({\n      path:'/login',\n      query:{p:currentRoute}\n    })\n  }\n  \n  return response;//奔向组件\n}, function(error) {\n  // 错误的响应，拦截\n  return Promise.reject(error);\n});\n\n\nVue.prototype.$axios=axios;\nwindow.axios=axios;\nexport default axios;"]}]}